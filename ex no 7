import numpy as np
import pandas as pd
from sklearn.datasets import load_iris

# Step 1: Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels

# Number of classes
n_classes = len(np.unique(y))

# Step 2: Calculate the overall mean
mean_overall = np.mean(X, axis=0)

# Step 3: Calculate the mean for each class
mean_classes = []
for i in range(n_classes):
    mean_class = np.mean(X[y == i], axis=0)
    mean_classes.append(mean_class)

# Step 4: Calculate the between-class scatter matrix (S_B)
S_B = np.zeros((X.shape[1], X.shape[1]))
for i in range(n_classes):
    mean_class = mean_classes[i]
    class_size = X[y == i].shape[0]
    mean_diff = (mean_class - mean_overall).reshape(-1, 1)
    S_B += class_size * (mean_diff).dot(mean_diff.T)

# Step 5: Calculate the within-class scatter matrix (S_W)
S_W = np.zeros((X.shape[1], X.shape[1]))
for i in range(n_classes):
    class_samples = X[y == i]
    mean_class = mean_classes[i]
    class_diff = class_samples - mean_class
    S_W += class_diff.T.dot(class_diff)

# Step 6: Compute the eigenvalues and eigenvectors of the matrix S_W^-1 * S_B
eigvals, eigvecs = np.linalg.eig(np.linalg.inv(S_W).dot(S_B))

# Step 7: Sort the eigenvalues in decreasing order and get the corresponding eigenvectors
sorted_indices = np.argsort(eigvals)[::-1]
eigvals_sorted = eigvals[sorted_indices]
eigvecs_sorted = eigvecs[:, sorted_indices]

# Step 8: Select the top k eigenvectors (for 2D, select the first two eigenvectors)
k = 2  # For example, select top 2 eigenvectors
W_k = eigvecs_sorted[:, :k]

# Step 9: Project the data onto the new subspace (using W_k)
X_lda = X.dot(W_k)

# Printing the results
print("Eigenvalues:", eigvals_sorted[:k])
print("Eigenvectors (top 2):\n", W_k)
print("\nProjected Data (LDA transformed):\n", X_lda[:5])  # Show the first 5 projected points

