import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris

# Step 1: Load the dataset (using Iris dataset as an example)
iris = load_iris()
X = iris.data  # Features (4-dimensional)
y = iris.target  # Labels (3 classes)

# Step 2: Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)  # Standardizing to mean=0 and std=1

# Step 3: Apply PCA to reduce the dimensions to 2 components
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Step 4: Plot the data with the new principal components
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=100)
plt.title('PCA of Iris Dataset (2 Components)', fontsize=14)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar(label='Classes')
plt.grid(True)
plt.show()

# Step 5: Display the variance explained by each component
explained_variance = pca.explained_variance_ratio_
print(f"Variance explained by each principal component: {explained_variance}")
print(f"Total variance explained by the two components: {sum(explained_variance)}")

# Plotting the explained variance
plt.figure(figsize=(6, 4))
plt.bar(range(1, 3), explained_variance, alpha=0.7, color='blue')
plt.xlabel('Principal Components')
plt.ylabel('Explained Variance Ratio')
plt.title('Explained Variance by Each Principal Component')
plt.show()
